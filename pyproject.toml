[build-system]
requires = ["setuptools", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "jira_access"
description = "A simple python helper for the JIRA REST API."
readme = "README.md"
requires-python = ">=3.7"
keywords = ["jira", "xray"]
license = { text = "MIT License" }
classifiers = ["Programming Language :: Python :: 3"]
dependencies = ["requests"]
dynamic = ["version"]

[tool.setuptools.packages]
find = {}

[project.optional-dependencies]
dev = [
  # linters and formatters:
  "ruff",
  # unit-tests:
  "pytest",
  "pytest-dotenv",
  # updater:
  "pip-tools",
  # git:
  "pre-commit",
  # type-checker:
  "mypy",
  "types-requests",
]
[tool.setuptools_scm]
write_to = "jira_access/_version.py"

[tool.ruff]
fix = true
line-length = 120
extend-exclude = [
  "docs",
  "setup.py",
  "_version.py", # Autogenerated by setuptools_scm
]
[tool.ruff.format]
docstring-code-format = true
preview = true
[tool.ruff.lint]
select = ["ALL"]
preview = true
extend-ignore = [
  # Scewo Specific:
  "ANN",     # Missing type annotation (too strict, let developer decide if he wants type annotations)
  "COM812",  # Trailing comma missing (recommended by ruff format)
  "CPY001",  # Missing copyright header (not compatible with Scewo copyright header)
  "DOC502",  # Raised exception is not explicitly raised (better to be explicit)
  "DTZ",     # Use of datetime.now() without timezone (too strict, let developer decide)
  "E501",    # Line too long (let formatter decide)
  "EM",      # Assign error to variable before raising (creates more variables than needed)
  "FA100",   #Add `from __future__ import annotations` to simplify `typing.Optional` (Optional is more readable)
  "FIX",     # Lints for fix comments (too strict)
  "FURB101", # Read file with pathlib (let developer decide)
  "FURB103", # Write file with pathlib (let developer decide)
  "ISC001",  # Implicitly concatenated string literals on one line (recommended by ruff format)
  "PD",      # Pandas linter (only enable this for pandas projects)
  "PGH003",  # Use specific rule codes when ignoring type issues (too strict especially because no fix available)
  "PLR2004", # Magic value used in comparison (too strict)
  "PTH",     # Don't use pathlib (let developer decide)
  "PYI024",  # Use typing.NamedTuple instead of collections.namedtuple (too strict let developer decide)
  "RUF031",  # Use parentheses for tuples in subscripts (more readable with parentheses)
  "S101",    # Use of assert (too strict, also needed for mypy)
  "SIM105",  # Use contextlib.suppress instead of try-except-pass (too strict)
  "T20",     # Print found (too strict let developer decide)
  "TD",      # Lints for todo comments (too strict)
  "TRY",     # Prevent Exception Handling AntiPatterns (too strict)
  "UP045",   # Use `X | None` for type annotations (Optional is more readable)

]
pydocstyle.convention = "google"
[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
  "F401", # imported but unused (for reexporting modules)
  "F403", # unable to detect undefined names for * imports (for reexporting modules)
  "D104", # Missing docstring in public package (not needed for reexporting modules)
]
"docs/**" = [
  "ALL", # Disable all lints for documentation
]
"scripts/**" = [
  "INP001", # Part of an implicit namespace package (not needed for scripts)
]
"tests/**" = [
  "D",      # Docstring lint (no need for docstrings in unit tests, too strict)
  "DOC",    # Docstring lint (no need for docstrings in unit tests, too strict)
  "INP001", # Part of an implicit namespace package (not needed for unit tests)
  "PT018",  # Assertions should be split into separate tests (too strict for testcases)
]

[tool.pytest.ini_options]
env_files = [".env"]
